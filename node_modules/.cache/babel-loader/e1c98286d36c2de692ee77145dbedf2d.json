{"ast":null,"code":"var _jsxFileName = \"/home/santiago/Trybe/myprojects/sd-09-project-trivia-react-redux/src/components/question.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { PropTypes } from 'prop-types';\nimport { setNext, setSelectedAnswer, setScore } from '../redux/actions';\nimport '../css/questions.css';\n\nclass Question extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      assertions: 0\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.savePlayerStatus = this.savePlayerStatus.bind(this);\n    this.calculateScore = this.calculateScore.bind(this);\n  }\n\n  handleClick({\n    target\n  }) {\n    const _this$props = this.props,\n          propSetNext = _this$props.propSetNext,\n          handleAnswer = _this$props.handleAnswer,\n          propSelectedAnswer = _this$props.propSelectedAnswer;\n    this.savePlayerStatus(target);\n    handleAnswer();\n    propSelectedAnswer(target);\n    propSetNext();\n  }\n\n  savePlayerStatus(target) {\n    const _this$props2 = this.props,\n          name = _this$props2.name,\n          score = _this$props2.score,\n          token = _this$props2.token,\n          difficulty = _this$props2.question.difficulty;\n    const assertions = this.state.assertions;\n\n    if (target.className === 'correct') {\n      this.setState({\n        assertions: assertions + 1\n      });\n      this.calculateScore(difficulty);\n    }\n\n    localStorage.setItem('state', JSON.stringify({\n      player: {\n        name,\n        assertions,\n        score,\n        gravatarEmail: token\n      }\n    }));\n  }\n\n  calculateScore(level) {\n    const _this$props3 = this.props,\n          propSetScore = _this$props3.propSetScore,\n          time = _this$props3.time;\n    const assertions = this.state.assertions;\n    const correct = 10;\n    const levelStatus = {\n      easy: 1,\n      medium: 2,\n      hard: 3\n    };\n    let pointsLevel = 0;\n\n    if (level === 'easy') {\n      pointsLevel = levelStatus.easy;\n    }\n\n    if (level === 'medium') {\n      pointsLevel = levelStatus.medium;\n    }\n\n    if (level === 'hard') {\n      pointsLevel = levelStatus.hard;\n    }\n\n    const points = assertions * correct + time * pointsLevel;\n    propSetScore(points);\n  }\n\n  render() {\n    const _this$props4 = this.props,\n          disabled = _this$props4.disabled,\n          selectedAnswer = _this$props4.selectedAnswer,\n          _this$props4$question = _this$props4.question,\n          correctAnswer = _this$props4$question.correct_answer,\n          incorrectAnswers = _this$props4$question.incorrect_answers,\n          question = _this$props4$question.question,\n          category = _this$props4$question.category;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      \"data-testid\": \"question-category\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, category), React.createElement(\"h2\", {\n      \"data-testid\": \"question-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, question), React.createElement(\"button\", {\n      \"data-testid\": \"correct-answer\",\n      type: \"button\",\n      className: selectedAnswer && 'correct',\n      onClick: this.handleClick,\n      disabled: disabled,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, correctAnswer), incorrectAnswers.map((element, i) => React.createElement(\"button\", {\n      \"data-testid\": `wrong-answer-${i}`,\n      type: \"button\",\n      key: element,\n      className: selectedAnswer && 'incorrect',\n      onClick: this.handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, element)));\n  }\n\n}\n\nQuestion.propTypes = {\n  disabled: PropTypes.bool,\n  handleAnswer: PropTypes.func,\n  question: PropTypes.shape({\n    correct_answer: PropTypes.string,\n    incorrect_answers: PropTypes.arrayOf(PropTypes.string),\n    question: PropTypes.string,\n    category: PropTypes.string\n  })\n}.isRequired;\n\nconst mapStateToProps = ({\n  actionsReducer: {\n    selectedAnswer,\n    name,\n    token,\n    score\n  }\n}) => ({\n  selectedAnswer,\n  name,\n  token,\n  score\n});\n\nconst mapDispatchToProps = dispatch => ({\n  propSetNext: () => dispatch(setNext()),\n  propSelectedAnswer: selectedAnswer => dispatch(setSelectedAnswer(selectedAnswer)),\n  propSetScore: points => dispatch(setScore(points))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Question);","map":{"version":3,"sources":["/home/santiago/Trybe/myprojects/sd-09-project-trivia-react-redux/src/components/question.js"],"names":["React","connect","PropTypes","setNext","setSelectedAnswer","setScore","Question","Component","constructor","props","state","assertions","handleClick","bind","savePlayerStatus","calculateScore","target","propSetNext","handleAnswer","propSelectedAnswer","name","score","token","difficulty","question","className","setState","localStorage","setItem","JSON","stringify","player","gravatarEmail","level","propSetScore","time","correct","levelStatus","easy","medium","hard","pointsLevel","points","render","disabled","selectedAnswer","correctAnswer","correct_answer","incorrectAnswers","incorrect_answers","category","map","element","i","propTypes","bool","func","shape","string","arrayOf","isRequired","mapStateToProps","actionsReducer","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,SAAT,QAA0B,YAA1B;AACA,SAASC,OAAT,EAAkBC,iBAAlB,EAAqCC,QAArC,QAAqD,kBAArD;AACA,OAAO,sBAAP;;AAEA,MAAMC,QAAN,SAAuBN,KAAK,CAACO,SAA7B,CAAuC;AACrCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,UAAU,EAAE;AADD,KAAb;AAIA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKC,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBD,IAAtB,CAA2B,IAA3B,CAAxB;AACA,SAAKE,cAAL,GAAsB,KAAKA,cAAL,CAAoBF,IAApB,CAAyB,IAAzB,CAAtB;AACD;;AAEDD,EAAAA,WAAW,CAAC;AAAEI,IAAAA;AAAF,GAAD,EAAa;AAAA,wBACoC,KAAKP,KADzC;AAAA,UACdQ,WADc,eACdA,WADc;AAAA,UACDC,YADC,eACDA,YADC;AAAA,UACaC,kBADb,eACaA,kBADb;AAEtB,SAAKL,gBAAL,CAAsBE,MAAtB;AACAE,IAAAA,YAAY;AACZC,IAAAA,kBAAkB,CAACH,MAAD,CAAlB;AACAC,IAAAA,WAAW;AACZ;;AAEDH,EAAAA,gBAAgB,CAACE,MAAD,EAAS;AAAA,yBACkC,KAAKP,KADvC;AAAA,UACfW,IADe,gBACfA,IADe;AAAA,UACTC,KADS,gBACTA,KADS;AAAA,UACFC,KADE,gBACFA,KADE;AAAA,UACiBC,UADjB,gBACKC,QADL,CACiBD,UADjB;AAAA,UAEfZ,UAFe,GAEA,KAAKD,KAFL,CAEfC,UAFe;;AAGvB,QAAIK,MAAM,CAACS,SAAP,KAAqB,SAAzB,EAAoC;AAClC,WAAKC,QAAL,CAAc;AACZf,QAAAA,UAAU,EAAEA,UAAU,GAAG;AADb,OAAd;AAGA,WAAKI,cAAL,CAAoBQ,UAApB;AACD;;AAEDI,IAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BC,IAAI,CAACC,SAAL,CAAe;AAC3CC,MAAAA,MAAM,EAAE;AACNX,QAAAA,IADM;AAENT,QAAAA,UAFM;AAGNU,QAAAA,KAHM;AAINW,QAAAA,aAAa,EAAEV;AAJT;AADmC,KAAf,CAA9B;AAQD;;AAEDP,EAAAA,cAAc,CAACkB,KAAD,EAAQ;AAAA,yBACW,KAAKxB,KADhB;AAAA,UACZyB,YADY,gBACZA,YADY;AAAA,UACEC,IADF,gBACEA,IADF;AAAA,UAEZxB,UAFY,GAEG,KAAKD,KAFR,CAEZC,UAFY;AAGpB,UAAMyB,OAAO,GAAG,EAAhB;AACA,UAAMC,WAAW,GAAG;AAClBC,MAAAA,IAAI,EAAE,CADY;AAElBC,MAAAA,MAAM,EAAE,CAFU;AAGlBC,MAAAA,IAAI,EAAE;AAHY,KAApB;AAKA,QAAIC,WAAW,GAAG,CAAlB;;AAEA,QAAIR,KAAK,KAAK,MAAd,EAAsB;AACpBQ,MAAAA,WAAW,GAAGJ,WAAW,CAACC,IAA1B;AACD;;AAED,QAAIL,KAAK,KAAK,QAAd,EAAwB;AACtBQ,MAAAA,WAAW,GAAGJ,WAAW,CAACE,MAA1B;AACD;;AAED,QAAIN,KAAK,KAAK,MAAd,EAAsB;AACpBQ,MAAAA,WAAW,GAAGJ,WAAW,CAACG,IAA1B;AACD;;AAED,UAAME,MAAM,GAAI/B,UAAU,GAAGyB,OAAd,GAA0BD,IAAI,GAAGM,WAAhD;AACAP,IAAAA,YAAY,CAACQ,MAAD,CAAZ;AACD;;AAEDC,EAAAA,MAAM,GAAG;AAAA,yBASC,KAAKlC,KATN;AAAA,UAELmC,QAFK,gBAELA,QAFK;AAAA,UAGLC,cAHK,gBAGLA,cAHK;AAAA,+CAILrB,QAJK;AAAA,UAKasB,aALb,yBAKHC,cALG;AAAA,UAMgBC,gBANhB,yBAMHC,iBANG;AAAA,UAOHzB,QAPG,yBAOHA,QAPG;AAAA,UAQH0B,QARG,yBAQHA,QARG;AAUP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAI,qBAAY,mBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAsCA,QAAtC,CADF,EAEE;AAAI,qBAAY,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAkC1B,QAAlC,CAFF,EAGE;AACE,qBAAY,gBADd;AAEE,MAAA,IAAI,EAAC,QAFP;AAGE,MAAA,SAAS,EAAGqB,cAAc,IAAI,SAHhC;AAIE,MAAA,OAAO,EAAG,KAAKjC,WAJjB;AAKE,MAAA,QAAQ,EAAGgC,QALb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOIE,aAPJ,CAHF,EAYGE,gBAAgB,CAACG,GAAjB,CAAqB,CAACC,OAAD,EAAUC,CAAV,KACpB;AACE,qBAAe,gBAAeA,CAAE,EADlC;AAEE,MAAA,IAAI,EAAC,QAFP;AAGE,MAAA,GAAG,EAAGD,OAHR;AAIE,MAAA,SAAS,EAAGP,cAAc,IAAI,WAJhC;AAKE,MAAA,OAAO,EAAG,KAAKjC,WALjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOGwC,OAPH,CADD,CAZH,CADF;AA0BD;;AAvGoC;;AA0GvC9C,QAAQ,CAACgD,SAAT,GAAqB;AACnBV,EAAAA,QAAQ,EAAE1C,SAAS,CAACqD,IADD;AAEnBrC,EAAAA,YAAY,EAAEhB,SAAS,CAACsD,IAFL;AAGnBhC,EAAAA,QAAQ,EAAEtB,SAAS,CAACuD,KAAV,CAAgB;AACxBV,IAAAA,cAAc,EAAE7C,SAAS,CAACwD,MADF;AAExBT,IAAAA,iBAAiB,EAAE/C,SAAS,CAACyD,OAAV,CAAkBzD,SAAS,CAACwD,MAA5B,CAFK;AAGxBlC,IAAAA,QAAQ,EAAEtB,SAAS,CAACwD,MAHI;AAIxBR,IAAAA,QAAQ,EAAEhD,SAAS,CAACwD;AAJI,GAAhB;AAHS,EASnBE,UATF;;AAWA,MAAMC,eAAe,GAAG,CAAC;AAAEC,EAAAA,cAAc,EAAE;AAAEjB,IAAAA,cAAF;AAAkBzB,IAAAA,IAAlB;AAAwBE,IAAAA,KAAxB;AAA+BD,IAAAA;AAA/B;AAAlB,CAAD,MAAiE;AACvFwB,EAAAA,cADuF;AAEvFzB,EAAAA,IAFuF;AAGvFE,EAAAA,KAHuF;AAIvFD,EAAAA;AAJuF,CAAjE,CAAxB;;AAOA,MAAM0C,kBAAkB,GAAIC,QAAD,KAAe;AACxC/C,EAAAA,WAAW,EAAE,MAAM+C,QAAQ,CAAC7D,OAAO,EAAR,CADa;AAExCgB,EAAAA,kBAAkB,EAAG0B,cAAD,IAAoBmB,QAAQ,CAAC5D,iBAAiB,CAACyC,cAAD,CAAlB,CAFR;AAGxCX,EAAAA,YAAY,EAAGQ,MAAD,IAAYsB,QAAQ,CAAC3D,QAAQ,CAACqC,MAAD,CAAT;AAHM,CAAf,CAA3B;;AAMA,eAAezC,OAAO,CAAC4D,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CzD,QAA7C,CAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { PropTypes } from 'prop-types';\nimport { setNext, setSelectedAnswer, setScore } from '../redux/actions';\nimport '../css/questions.css';\n\nclass Question extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      assertions: 0,\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n    this.savePlayerStatus = this.savePlayerStatus.bind(this);\n    this.calculateScore = this.calculateScore.bind(this);\n  }\n\n  handleClick({ target }) {\n    const { propSetNext, handleAnswer, propSelectedAnswer } = this.props;\n    this.savePlayerStatus(target);\n    handleAnswer();\n    propSelectedAnswer(target);\n    propSetNext();\n  }\n\n  savePlayerStatus(target) {\n    const { name, score, token, question: { difficulty } } = this.props;\n    const { assertions } = this.state;\n    if (target.className === 'correct') {\n      this.setState({\n        assertions: assertions + 1,\n      });\n      this.calculateScore(difficulty);\n    }\n\n    localStorage.setItem('state', JSON.stringify({\n      player: {\n        name,\n        assertions,\n        score,\n        gravatarEmail: token,\n      },\n    }));\n  }\n\n  calculateScore(level) {\n    const { propSetScore, time } = this.props;\n    const { assertions } = this.state;\n    const correct = 10;\n    const levelStatus = {\n      easy: 1,\n      medium: 2,\n      hard: 3,\n    };\n    let pointsLevel = 0;\n\n    if (level === 'easy') {\n      pointsLevel = levelStatus.easy;\n    }\n\n    if (level === 'medium') {\n      pointsLevel = levelStatus.medium;\n    }\n\n    if (level === 'hard') {\n      pointsLevel = levelStatus.hard;\n    }\n\n    const points = (assertions * correct) + (time * pointsLevel);\n    propSetScore(points);\n  }\n\n  render() {\n    const {\n      disabled,\n      selectedAnswer,\n      question: {\n        correct_answer: correctAnswer,\n        incorrect_answers: incorrectAnswers,\n        question,\n        category,\n      } } = this.props;\n    return (\n      <div>\n        <h2 data-testid=\"question-category\">{ category }</h2>\n        <h2 data-testid=\"question-text\">{ question }</h2>\n        <button\n          data-testid=\"correct-answer\"\n          type=\"button\"\n          className={ selectedAnswer && 'correct' }\n          onClick={ this.handleClick }\n          disabled={ disabled }\n        >\n          { correctAnswer }\n        </button>\n        {incorrectAnswers.map((element, i) => (\n          <button\n            data-testid={ `wrong-answer-${i}` }\n            type=\"button\"\n            key={ element }\n            className={ selectedAnswer && 'incorrect' }\n            onClick={ this.handleClick }\n          >\n            {element }\n          </button>\n        )) }\n      </div>\n    );\n  }\n}\n\nQuestion.propTypes = {\n  disabled: PropTypes.bool,\n  handleAnswer: PropTypes.func,\n  question: PropTypes.shape({\n    correct_answer: PropTypes.string,\n    incorrect_answers: PropTypes.arrayOf(PropTypes.string),\n    question: PropTypes.string,\n    category: PropTypes.string,\n  }),\n}.isRequired;\n\nconst mapStateToProps = ({ actionsReducer: { selectedAnswer, name, token, score } }) => ({\n  selectedAnswer,\n  name,\n  token,\n  score,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  propSetNext: () => dispatch(setNext()),\n  propSelectedAnswer: (selectedAnswer) => dispatch(setSelectedAnswer(selectedAnswer)),\n  propSetScore: (points) => dispatch(setScore(points)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Question);\n"]},"metadata":{},"sourceType":"module"}