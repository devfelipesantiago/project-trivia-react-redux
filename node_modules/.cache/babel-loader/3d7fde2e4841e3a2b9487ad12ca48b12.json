{"ast":null,"code":"var _jsxFileName = \"/home/santiago/Trybe/myprojects/sd-09-project-trivia-react-redux/src/pages/trivia.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { PropTypes } from 'prop-types';\nimport Header from '../components/header';\nimport { getQuestions, setNext, setSelectedAnswer } from '../redux/actions';\nimport Question from '../components/question';\n\nclass trivia extends React.Component {\n  constructor(pro) {\n    super(pro);\n    this.state = {\n      index: 0,\n      loading: true,\n      answered: false,\n      time: 30,\n      disabled: false\n    };\n    this.timer = 30;\n    this.handleClick = this.handleClick.bind(this);\n    this.handleGetToken = this.handleGetToken.bind(this);\n    this.handleAnswer = this.handleAnswer.bind(this);\n    this.countDown = this.countDown.bind(this);\n  }\n\n  componentDidMount() {\n    this.startTimer();\n  }\n\n  componentDidUpdate() {\n    this.startTimer();\n  }\n\n  countDown() {\n    const time = this.state.time;\n    const propSelectedAnswer = this.props.propSelectedAnswer;\n    const nextTime = time - 1;\n    this.setState({\n      time: nextTime\n    });\n\n    if (nextTime === 0) {\n      clearInterval(this.timer);\n      propSelectedAnswer(true);\n      this.setState({\n        answered: true,\n        disabled: true\n      });\n      this.timer = 30;\n    }\n  }\n\n  startTimer() {\n    const maxTime = 30;\n    const answered = this.state.answered;\n\n    if (this.timer === maxTime && !answered) {\n      const second = 1000;\n      this.timer = setInterval(this.countDown, second);\n    }\n  }\n\n  handleAnswer() {\n    this.setState({\n      answered: true\n    });\n  }\n\n  handleGetToken() {\n    const propQuestions = this.props.propQuestions;\n    propQuestions().then(() => this.setState({\n      loading: false\n    }));\n  }\n\n  async handleClick() {\n    const maxIndex = 4;\n    const index = this.state.index;\n    const _this$props = this.props,\n          propSetNext = _this$props.propSetNext,\n          propSelectedAnswer = _this$props.propSelectedAnswer;\n\n    if (index === maxIndex) {\n      this.setState(previousState => ({\n        index: previousState.index,\n        answered: false,\n        time: 30,\n        disabled: false\n      }));\n    } else {\n      this.setState(previousState => ({\n        index: previousState.index + 1,\n        answered: false,\n        time: 30,\n        disabled: false\n      }));\n    }\n\n    await propSelectedAnswer(null);\n    await propSetNext();\n  }\n\n  render() {\n    const results = this.props.results;\n    const _this$state = this.state,\n          index = _this$state.index,\n          loading = _this$state.loading,\n          answered = _this$state.answered,\n          time = _this$state.time,\n          disabled = _this$state.disabled;\n    const question = results.find((_question, i) => i === index);\n    if (loading) this.handleGetToken();\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, \"Trivia\"), !loading && React.createElement(Question, {\n      question: question,\n      handleAnswer: this.handleAnswer,\n      disabled: disabled,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      \"data-testid\": \"btn-next\",\n      type: \"button\",\n      onClick: this.handleClick,\n      hidden: !answered,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"Pr\\xF3xima\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, time));\n  }\n\n}\n\ntrivia.propTypes = {\n  propQuestions: PropTypes.func\n}.isRequired;\n\nconst mapStateToProps = ({\n  actionsReducer: {\n    token,\n    results,\n    next,\n    selectedAnswer\n  }\n}) => ({\n  token,\n  results,\n  next,\n  selectedAnswer\n});\n\nconst mapDispatchToProps = dispatch => ({\n  propQuestions: () => dispatch(getQuestions()),\n  propSetNext: () => dispatch(setNext()),\n  propSelectedAnswer: selectedAnswer => dispatch(setSelectedAnswer(selectedAnswer))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(trivia);","map":{"version":3,"sources":["/home/santiago/Trybe/myprojects/sd-09-project-trivia-react-redux/src/pages/trivia.js"],"names":["React","connect","PropTypes","Header","getQuestions","setNext","setSelectedAnswer","Question","trivia","Component","constructor","pro","state","index","loading","answered","time","disabled","timer","handleClick","bind","handleGetToken","handleAnswer","countDown","componentDidMount","startTimer","componentDidUpdate","propSelectedAnswer","props","nextTime","setState","clearInterval","maxTime","second","setInterval","propQuestions","then","maxIndex","propSetNext","previousState","render","results","question","find","_question","i","propTypes","func","isRequired","mapStateToProps","actionsReducer","token","next","selectedAnswer","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { PropTypes } from 'prop-types';\nimport Header from '../components/header';\nimport { getQuestions, setNext, setSelectedAnswer } from '../redux/actions';\nimport Question from '../components/question';\n\nclass trivia extends React.Component {\n  constructor(pro) {\n    super(pro);\n    this.state = {\n      index: 0,\n      loading: true,\n      answered: false,\n      time: 30,\n      disabled: false,\n    };\n    this.timer = 30;\n    this.handleClick = this.handleClick.bind(this);\n    this.handleGetToken = this.handleGetToken.bind(this);\n    this.handleAnswer = this.handleAnswer.bind(this);\n    this.countDown = this.countDown.bind(this);\n  }\n\n  componentDidMount() {\n    this.startTimer();\n  }\n\n  componentDidUpdate() {\n    this.startTimer();\n  }\n\n  countDown() {\n    const { time } = this.state;\n    const { propSelectedAnswer } = this.props;\n    const nextTime = time - 1;\n    this.setState({ time: nextTime });\n    if (nextTime === 0) {\n      clearInterval(this.timer);\n      propSelectedAnswer(true);\n      this.setState({ answered: true, disabled: true });\n      this.timer = 30;\n    }\n  }\n\n  startTimer() {\n    const maxTime = 30;\n    const { answered } = this.state;\n    if (this.timer === maxTime && !answered) {\n      const second = 1000;\n      this.timer = setInterval(this.countDown, second);\n    }\n  }\n\n  handleAnswer() {\n    this.setState({ answered: true });\n  }\n\n  handleGetToken() {\n    const { propQuestions } = this.props;\n    propQuestions()\n      .then(() => this.setState({ loading: false }));\n  }\n\n  async handleClick() {\n    const maxIndex = 4;\n    const { index } = this.state;\n    const { propSetNext, propSelectedAnswer } = this.props;\n    if (index === maxIndex) {\n      this.setState((previousState) => ({\n        index: previousState.index,\n        answered: false,\n        time: 30,\n        disabled: false,\n      }));\n    } else {\n      this.setState((previousState) => ({\n        index: previousState.index + 1,\n        answered: false,\n        time: 30,\n        disabled: false,\n      }));\n    }\n    await propSelectedAnswer(null);\n    await propSetNext();\n  }\n\n  render() {\n    const { results } = this.props;\n    const { index, loading, answered, time, disabled } = this.state;\n    const question = results.find((_question, i) => i === index);\n    if (loading) this.handleGetToken();\n    return (\n      <div className=\"App\">\n        <Header />\n        <h1>Trivia</h1>\n        {\n          (!loading) && <Question\n            question={ question }\n            handleAnswer={ this.handleAnswer }\n            disabled={ disabled }\n          />\n        }\n        <button\n          data-testid=\"btn-next\"\n          type=\"button\"\n          onClick={ this.handleClick }\n          hidden={ !answered }\n        >\n          Próxima\n        </button>\n        <div>\n          { time }\n        </div>\n      </div>\n    );\n  }\n}\n\ntrivia.propTypes = {\n  propQuestions: PropTypes.func,\n}.isRequired;\n\nconst mapStateToProps = ({\n  actionsReducer: { token, results, next, selectedAnswer },\n}) => ({\n  token,\n  results,\n  next,\n  selectedAnswer,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  propQuestions: () => dispatch(getQuestions()),\n  propSetNext: () => dispatch(setNext()),\n  propSelectedAnswer:\n    (selectedAnswer) => dispatch(setSelectedAnswer(selectedAnswer)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(trivia);\n"]},"metadata":{},"sourceType":"module"}