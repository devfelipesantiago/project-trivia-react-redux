{"ast":null,"code":"var _jsxFileName = \"/home/santiago/Trybe/myprojects/sd-09-project-trivia-react-redux/src/pages/trivia.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { PropTypes } from 'prop-types';\nimport Header from '../components/header';\nimport { getQuestions, setNext } from '../redux/actions';\nimport Question from '../components/question';\n\nclass trivia extends React.Component {\n  constructor(pro) {\n    super(pro);\n    this.state = {\n      index: 0,\n      loading: true,\n      answered: false\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.handleGetToken = this.handleGetToken.bind(this);\n    this.handleAnswer = this.handleAnswer.bind(this);\n  }\n\n  handleAnswer() {\n    this.setState({\n      answered: true\n    });\n  }\n\n  handleGetToken() {\n    const propQuestions = this.props.propQuestions;\n    propQuestions().then(() => this.setState({\n      loading: false\n    }));\n  }\n\n  async handleClick() {\n    const maxIndex = 4;\n    const index = this.state.index;\n    const propSetNext = this.props.propSetNext;\n\n    if (index === maxIndex) {\n      this.setState(previousState => ({\n        index: previousState.index,\n        answered: false\n      }));\n    } else {\n      this.setState(previousState => ({\n        index: previousState.index + 1,\n        answered: false\n      }));\n    }\n\n    await propSetNext();\n  }\n\n  render() {\n    const results = this.props.results;\n    const _this$state = this.state,\n          index = _this$state.index,\n          loading = _this$state.loading,\n          answered = _this$state.answered;\n    const question = results.find((_question, i) => i === index);\n    if (loading) this.handleGetToken();\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, \"Trivia\"), !loading && React.createElement(Question, {\n      question: question,\n      handleAnswer: this.handleAnswer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      \"data-testid\": \"btn-next\",\n      type: \"button\",\n      onClick: this.handleClick,\n      hidden: !answered,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"Pr\\xF3xima\"));\n  }\n\n}\n\ntrivia.propTypes = {\n  propQuestions: PropTypes.func\n}.isRequired;\n\nconst mapStateToProps = ({\n  actionsReducer: {\n    token,\n    results,\n    next\n  }\n}) => ({\n  token,\n  results,\n  next\n});\n\nconst mapDispatchToProps = dispatch => ({\n  propQuestions: () => dispatch(getQuestions()),\n  propSetNext: () => dispatch(setNext()),\n  propSetScore: () => dispatch(setScore(points))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(trivia);","map":{"version":3,"sources":["/home/santiago/Trybe/myprojects/sd-09-project-trivia-react-redux/src/pages/trivia.js"],"names":["React","connect","PropTypes","Header","getQuestions","setNext","Question","trivia","Component","constructor","pro","state","index","loading","answered","handleClick","bind","handleGetToken","handleAnswer","setState","propQuestions","props","then","maxIndex","propSetNext","previousState","render","results","question","find","_question","i","propTypes","func","isRequired","mapStateToProps","actionsReducer","token","next","mapDispatchToProps","dispatch","propSetScore","setScore","points"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { PropTypes } from 'prop-types';\nimport Header from '../components/header';\nimport { getQuestions, setNext } from '../redux/actions';\nimport Question from '../components/question';\n\nclass trivia extends React.Component {\n  constructor(pro) {\n    super(pro);\n    this.state = {\n      index: 0,\n      loading: true,\n      answered: false,\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.handleGetToken = this.handleGetToken.bind(this);\n    this.handleAnswer = this.handleAnswer.bind(this);\n  }\n\n  handleAnswer() {\n    this.setState({ answered: true });\n  }\n\n  handleGetToken() {\n    const { propQuestions } = this.props;\n    propQuestions()\n      .then(() => this.setState({ loading: false }));\n  }\n\n  async handleClick() {\n    const maxIndex = 4;\n    const { index } = this.state;\n    const { propSetNext } = this.props;\n    if (index === maxIndex) {\n      this.setState((previousState) => ({ index: previousState.index, answered: false }));\n    } else {\n      this.setState((previousState) => ({\n        index: previousState.index + 1,\n        answered: false,\n      }));\n    }\n    await propSetNext();\n  }\n\n  render() {\n    const { results } = this.props;\n    const { index, loading, answered } = this.state;\n    const question = results.find((_question, i) => i === index);\n    if (loading) this.handleGetToken();\n    return (\n      <div className=\"App\">\n        <Header />\n        <h1>Trivia</h1>\n        {(!loading)\n        && <Question question={ question } handleAnswer={ this.handleAnswer } />}\n        <button\n          data-testid=\"btn-next\"\n          type=\"button\"\n          onClick={ this.handleClick }\n          hidden={ !answered }\n        >\n          Pr√≥xima\n        </button>\n      </div>\n    );\n  }\n}\n\ntrivia.propTypes = {\n  propQuestions: PropTypes.func,\n}.isRequired;\n\nconst mapStateToProps = ({ actionsReducer: { token, results, next } }) => ({\n  token,\n  results,\n  next,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  propQuestions: () => dispatch(getQuestions()),\n  propSetNext: () => dispatch(setNext()),\n  propSetScore: () => dispatch(setScore(points)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(trivia);\n"]},"metadata":{},"sourceType":"module"}