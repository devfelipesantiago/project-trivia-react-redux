{"ast":null,"code":"var _jsxFileName = \"/home/santiago/Trybe/myprojects/sd-09-project-trivia-react-redux/src/components/question.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { PropTypes } from 'prop-types';\nimport { setNext, setScore } from '../redux/actions';\nimport '../css/questions.css';\n\nclass Question extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedAnswer: null,\n      score: 5\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.handleScore = this.handleScore.bind(this);\n  }\n\n  async handleClick(e) {\n    const _this$props = this.props,\n          propSetNext = _this$props.propSetNext,\n          handleAnswer = _this$props.handleAnswer,\n          propSetScore = _this$props.propSetScore;\n    handleAnswer();\n    this.setState({\n      selectedAnswer: e.target\n    });\n    await propSetNext();\n    await propSetScore();\n  }\n\n  handleScore() {\n    const propSetScore = this.props.propSetScore;\n    const score = this.state.score;\n    propSetScore(score);\n  }\n\n  render() {\n    const _this$props$question = this.props.question,\n          correctAnswer = _this$props$question.correct_answer,\n          incorrectAnswers = _this$props$question.incorrect_answers,\n          question = _this$props$question.question,\n          category = _this$props$question.category;\n    const selectedAnswer = this.state.selectedAnswer;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      \"data-testid\": \"question-category\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, category), React.createElement(\"h2\", {\n      \"data-testid\": \"question-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, question), React.createElement(\"button\", {\n      \"data-testid\": \"correct-answer\",\n      type: \"button\",\n      className: selectedAnswer && 'correct',\n      onClick: this.handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, correctAnswer), incorrectAnswers.map((element, i) => React.createElement(\"button\", {\n      \"data-testid\": `wrong-answer-${i}`,\n      type: \"button\",\n      key: element,\n      className: selectedAnswer && 'incorrect',\n      onClick: this.handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, element)));\n  }\n\n}\n\nQuestion.propTypes = {\n  handleAnswer: PropTypes.func,\n  question: PropTypes.shape({\n    correct_answer: PropTypes.string,\n    incorrect_answers: PropTypes.arrayOf(PropTypes.string),\n    question: PropTypes.string,\n    category: PropTypes.string\n  })\n}.isRequired;\n\nconst mapDispatchToProps = dispatch => ({\n  propSetNext: () => dispatch(setNext()),\n  propSetScore: points => dispatch(setScore(points))\n});\n\nexport default connect(null, mapDispatchToProps)(Question);","map":{"version":3,"sources":["/home/santiago/Trybe/myprojects/sd-09-project-trivia-react-redux/src/components/question.js"],"names":["React","connect","PropTypes","setNext","setScore","Question","Component","constructor","props","state","selectedAnswer","score","handleClick","bind","handleScore","e","propSetNext","handleAnswer","propSetScore","setState","target","render","question","correctAnswer","correct_answer","incorrectAnswers","incorrect_answers","category","map","element","i","propTypes","func","shape","string","arrayOf","isRequired","mapDispatchToProps","dispatch","points"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,SAAT,QAA0B,YAA1B;AACA,SAASC,OAAT,EAAkBC,QAAlB,QAAkC,kBAAlC;AACA,OAAO,sBAAP;;AAEA,MAAMC,QAAN,SAAuBL,KAAK,CAACM,SAA7B,CAAuC;AACrCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,cAAc,EAAE,IADL;AAEXC,MAAAA,KAAK,EAAE;AAFI,KAAb;AAIA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBD,IAAjB,CAAsB,IAAtB,CAAnB;AACD;;AAED,QAAMD,WAAN,CAAkBG,CAAlB,EAAqB;AAAA,wBACiC,KAAKP,KADtC;AAAA,UACXQ,WADW,eACXA,WADW;AAAA,UACEC,YADF,eACEA,YADF;AAAA,UACgBC,YADhB,eACgBA,YADhB;AAEnBD,IAAAA,YAAY;AACZ,SAAKE,QAAL,CAAc;AAAET,MAAAA,cAAc,EAAEK,CAAC,CAACK;AAApB,KAAd;AACA,UAAMJ,WAAW,EAAjB;AACA,UAAME,YAAY,EAAlB;AACD;;AAEDJ,EAAAA,WAAW,GAAG;AAAA,UACJI,YADI,GACa,KAAKV,KADlB,CACJU,YADI;AAAA,UAEJP,KAFI,GAEM,KAAKF,KAFX,CAEJE,KAFI;AAGZO,IAAAA,YAAY,CAACP,KAAD,CAAZ;AACD;;AAEDU,EAAAA,MAAM,GAAG;AAAA,iCAMD,KAAKb,KANJ,CACCc,QADD;AAAA,UAEWC,aAFX,wBAELC,cAFK;AAAA,UAGcC,gBAHd,wBAGLC,iBAHK;AAAA,UAILJ,QAJK,wBAILA,QAJK;AAAA,UAKLK,QALK,wBAKLA,QALK;AAAA,UAOCjB,cAPD,GAOoB,KAAKD,KAPzB,CAOCC,cAPD;AAQP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAI,qBAAY,mBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAsCiB,QAAtC,CADF,EAEE;AAAI,qBAAY,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAkCL,QAAlC,CAFF,EAGE;AACE,qBAAY,gBADd;AAEE,MAAA,IAAI,EAAC,QAFP;AAGE,MAAA,SAAS,EAAGZ,cAAc,IAAI,SAHhC;AAIE,MAAA,OAAO,EAAG,KAAKE,WAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMIW,aANJ,CAHF,EAWGE,gBAAgB,CAACG,GAAjB,CAAqB,CAACC,OAAD,EAAUC,CAAV,KACpB;AACE,qBAAe,gBAAeA,CAAE,EADlC;AAEE,MAAA,IAAI,EAAC,QAFP;AAGE,MAAA,GAAG,EAAGD,OAHR;AAIE,MAAA,SAAS,EAAGnB,cAAc,IAAI,WAJhC;AAKE,MAAA,OAAO,EAAG,KAAKE,WALjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOGiB,OAPH,CADD,CAXH,CADF;AAyBD;;AA1DoC;;AA6DvCxB,QAAQ,CAAC0B,SAAT,GAAqB;AACnBd,EAAAA,YAAY,EAAEf,SAAS,CAAC8B,IADL;AAEnBV,EAAAA,QAAQ,EAAEpB,SAAS,CAAC+B,KAAV,CAAgB;AACxBT,IAAAA,cAAc,EAAEtB,SAAS,CAACgC,MADF;AAExBR,IAAAA,iBAAiB,EAAExB,SAAS,CAACiC,OAAV,CAAkBjC,SAAS,CAACgC,MAA5B,CAFK;AAGxBZ,IAAAA,QAAQ,EAAEpB,SAAS,CAACgC,MAHI;AAIxBP,IAAAA,QAAQ,EAAEzB,SAAS,CAACgC;AAJI,GAAhB;AAFS,EAQnBE,UARF;;AAUA,MAAMC,kBAAkB,GAAIC,QAAD,KAAe;AACxCtB,EAAAA,WAAW,EAAE,MAAMsB,QAAQ,CAACnC,OAAO,EAAR,CADa;AAExCe,EAAAA,YAAY,EAAGqB,MAAD,IAAYD,QAAQ,CAAClC,QAAQ,CAACmC,MAAD,CAAT;AAFM,CAAf,CAA3B;;AAKA,eAAetC,OAAO,CAAC,IAAD,EAAOoC,kBAAP,CAAP,CAAkChC,QAAlC,CAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { PropTypes } from 'prop-types';\nimport { setNext, setScore } from '../redux/actions';\nimport '../css/questions.css';\n\nclass Question extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedAnswer: null,\n      score: 5,\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.handleScore = this.handleScore.bind(this);\n  }\n\n  async handleClick(e) {\n    const { propSetNext, handleAnswer, propSetScore } = this.props;\n    handleAnswer();\n    this.setState({ selectedAnswer: e.target });\n    await propSetNext();\n    await propSetScore();\n  }\n\n  handleScore() {\n    const { propSetScore } = this.props;\n    const { score } = this.state;\n    propSetScore(score);\n  }\n\n  render() {\n    const { question: {\n      correct_answer: correctAnswer,\n      incorrect_answers: incorrectAnswers,\n      question,\n      category,\n    } } = this.props;\n    const { selectedAnswer } = this.state;\n    return (\n      <div>\n        <h2 data-testid=\"question-category\">{ category }</h2>\n        <h2 data-testid=\"question-text\">{ question }</h2>\n        <button\n          data-testid=\"correct-answer\"\n          type=\"button\"\n          className={ selectedAnswer && 'correct' }\n          onClick={ this.handleClick }\n        >\n          { correctAnswer }\n        </button>\n        {incorrectAnswers.map((element, i) => (\n          <button\n            data-testid={ `wrong-answer-${i}` }\n            type=\"button\"\n            key={ element }\n            className={ selectedAnswer && 'incorrect' }\n            onClick={ this.handleClick }\n          >\n            {element }\n          </button>\n        )) }\n      </div>\n    );\n  }\n}\n\nQuestion.propTypes = {\n  handleAnswer: PropTypes.func,\n  question: PropTypes.shape({\n    correct_answer: PropTypes.string,\n    incorrect_answers: PropTypes.arrayOf(PropTypes.string),\n    question: PropTypes.string,\n    category: PropTypes.string,\n  }),\n}.isRequired;\n\nconst mapDispatchToProps = (dispatch) => ({\n  propSetNext: () => dispatch(setNext()),\n  propSetScore: (points) => dispatch(setScore(points)),\n});\n\nexport default connect(null, mapDispatchToProps)(Question);\n"]},"metadata":{},"sourceType":"module"}